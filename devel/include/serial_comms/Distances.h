// Generated by gencpp from file serial_comms/Distances.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMS_MESSAGE_DISTANCES_H
#define SERIAL_COMMS_MESSAGE_DISTANCES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_comms
{
template <class ContainerAllocator>
struct Distances_
{
  typedef Distances_<ContainerAllocator> Type;

  Distances_()
    : distance_a(0)
    , distance_b(0)
    , distance_c(0)
    , distance_d(0)
    , distance_e(0)
    , distance_f(0)  {
    }
  Distances_(const ContainerAllocator& _alloc)
    : distance_a(0)
    , distance_b(0)
    , distance_c(0)
    , distance_d(0)
    , distance_e(0)
    , distance_f(0)  {
  (void)_alloc;
    }



   typedef int32_t _distance_a_type;
  _distance_a_type distance_a;

   typedef int32_t _distance_b_type;
  _distance_b_type distance_b;

   typedef int32_t _distance_c_type;
  _distance_c_type distance_c;

   typedef int32_t _distance_d_type;
  _distance_d_type distance_d;

   typedef int32_t _distance_e_type;
  _distance_e_type distance_e;

   typedef int32_t _distance_f_type;
  _distance_f_type distance_f;





  typedef boost::shared_ptr< ::serial_comms::Distances_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_comms::Distances_<ContainerAllocator> const> ConstPtr;

}; // struct Distances_

typedef ::serial_comms::Distances_<std::allocator<void> > Distances;

typedef boost::shared_ptr< ::serial_comms::Distances > DistancesPtr;
typedef boost::shared_ptr< ::serial_comms::Distances const> DistancesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_comms::Distances_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_comms::Distances_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_comms::Distances_<ContainerAllocator1> & lhs, const ::serial_comms::Distances_<ContainerAllocator2> & rhs)
{
  return lhs.distance_a == rhs.distance_a &&
    lhs.distance_b == rhs.distance_b &&
    lhs.distance_c == rhs.distance_c &&
    lhs.distance_d == rhs.distance_d &&
    lhs.distance_e == rhs.distance_e &&
    lhs.distance_f == rhs.distance_f;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_comms::Distances_<ContainerAllocator1> & lhs, const ::serial_comms::Distances_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_comms

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_comms::Distances_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_comms::Distances_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_comms::Distances_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_comms::Distances_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_comms::Distances_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_comms::Distances_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_comms::Distances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88930f00743784851f3f6d92c51802bd";
  }

  static const char* value(const ::serial_comms::Distances_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88930f0074378485ULL;
  static const uint64_t static_value2 = 0x1f3f6d92c51802bdULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_comms::Distances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_comms/Distances";
  }

  static const char* value(const ::serial_comms::Distances_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_comms::Distances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Defines a message for holding the six distance values.\n"
"int32 distance_a\n"
"int32 distance_b\n"
"int32 distance_c\n"
"int32 distance_d\n"
"int32 distance_e\n"
"int32 distance_f\n"
;
  }

  static const char* value(const ::serial_comms::Distances_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_comms::Distances_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance_a);
      stream.next(m.distance_b);
      stream.next(m.distance_c);
      stream.next(m.distance_d);
      stream.next(m.distance_e);
      stream.next(m.distance_f);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Distances_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_comms::Distances_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_comms::Distances_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "distance_a: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distance_a);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "distance_b: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distance_b);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "distance_c: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distance_c);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "distance_d: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distance_d);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "distance_e: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distance_e);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "distance_f: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distance_f);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMS_MESSAGE_DISTANCES_H
