// Generated by gencpp from file serial_comms/INSPVAE.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMS_MESSAGE_INSPVAE_H
#define SERIAL_COMMS_MESSAGE_INSPVAE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace serial_comms
{
template <class ContainerAllocator>
struct INSPVAE_
{
  typedef INSPVAE_<ContainerAllocator> Type;

  INSPVAE_()
    : header()
    , week(0)
    , seconds(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , undulation(0.0)
    , std_lat(0.0)
    , std_lon(0.0)
    , std_alt(0.0)
    , ve(0.0)
    , vn(0.0)
    , vu(0.0)
    , std_ve(0.0)
    , std_vn(0.0)
    , std_vu(0.0)
    , pitch(0.0)
    , roll(0.0)
    , yaw(0.0)
    , std_pitch(0.0)
    , std_roll(0.0)
    , std_yaw(0.0)
    , ns(0)
    , gnss_st(0)
    , nav_st(0)
    , odo_st(0)
    , nav_status()  {
    }
  INSPVAE_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , week(0)
    , seconds(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , undulation(0.0)
    , std_lat(0.0)
    , std_lon(0.0)
    , std_alt(0.0)
    , ve(0.0)
    , vn(0.0)
    , vu(0.0)
    , std_ve(0.0)
    , std_vn(0.0)
    , std_vu(0.0)
    , pitch(0.0)
    , roll(0.0)
    , yaw(0.0)
    , std_pitch(0.0)
    , std_roll(0.0)
    , std_yaw(0.0)
    , ns(0)
    , gnss_st(0)
    , nav_st(0)
    , odo_st(0)
    , nav_status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _week_type;
  _week_type week;

   typedef double _seconds_type;
  _seconds_type seconds;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _undulation_type;
  _undulation_type undulation;

   typedef double _std_lat_type;
  _std_lat_type std_lat;

   typedef double _std_lon_type;
  _std_lon_type std_lon;

   typedef double _std_alt_type;
  _std_alt_type std_alt;

   typedef double _ve_type;
  _ve_type ve;

   typedef double _vn_type;
  _vn_type vn;

   typedef double _vu_type;
  _vu_type vu;

   typedef double _std_ve_type;
  _std_ve_type std_ve;

   typedef double _std_vn_type;
  _std_vn_type std_vn;

   typedef double _std_vu_type;
  _std_vu_type std_vu;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _std_pitch_type;
  _std_pitch_type std_pitch;

   typedef double _std_roll_type;
  _std_roll_type std_roll;

   typedef double _std_yaw_type;
  _std_yaw_type std_yaw;

   typedef uint32_t _ns_type;
  _ns_type ns;

   typedef uint32_t _gnss_st_type;
  _gnss_st_type gnss_st;

   typedef uint32_t _nav_st_type;
  _nav_st_type nav_st;

   typedef uint32_t _odo_st_type;
  _odo_st_type odo_st;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _nav_status_type;
  _nav_status_type nav_status;





  typedef boost::shared_ptr< ::serial_comms::INSPVAE_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_comms::INSPVAE_<ContainerAllocator> const> ConstPtr;

}; // struct INSPVAE_

typedef ::serial_comms::INSPVAE_<std::allocator<void> > INSPVAE;

typedef boost::shared_ptr< ::serial_comms::INSPVAE > INSPVAEPtr;
typedef boost::shared_ptr< ::serial_comms::INSPVAE const> INSPVAEConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_comms::INSPVAE_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_comms::INSPVAE_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_comms::INSPVAE_<ContainerAllocator1> & lhs, const ::serial_comms::INSPVAE_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.week == rhs.week &&
    lhs.seconds == rhs.seconds &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.undulation == rhs.undulation &&
    lhs.std_lat == rhs.std_lat &&
    lhs.std_lon == rhs.std_lon &&
    lhs.std_alt == rhs.std_alt &&
    lhs.ve == rhs.ve &&
    lhs.vn == rhs.vn &&
    lhs.vu == rhs.vu &&
    lhs.std_ve == rhs.std_ve &&
    lhs.std_vn == rhs.std_vn &&
    lhs.std_vu == rhs.std_vu &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.yaw == rhs.yaw &&
    lhs.std_pitch == rhs.std_pitch &&
    lhs.std_roll == rhs.std_roll &&
    lhs.std_yaw == rhs.std_yaw &&
    lhs.ns == rhs.ns &&
    lhs.gnss_st == rhs.gnss_st &&
    lhs.nav_st == rhs.nav_st &&
    lhs.odo_st == rhs.odo_st &&
    lhs.nav_status == rhs.nav_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_comms::INSPVAE_<ContainerAllocator1> & lhs, const ::serial_comms::INSPVAE_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_comms

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_comms::INSPVAE_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_comms::INSPVAE_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_comms::INSPVAE_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_comms::INSPVAE_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_comms::INSPVAE_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_comms::INSPVAE_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_comms::INSPVAE_<ContainerAllocator> >
{
  static const char* value()
  {
    return "952992b8f2d9974237c40c1e9c3b19ce";
  }

  static const char* value(const ::serial_comms::INSPVAE_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x952992b8f2d99742ULL;
  static const uint64_t static_value2 = 0x37c40c1e9c3b19ceULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_comms::INSPVAE_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_comms/INSPVAE";
  }

  static const char* value(const ::serial_comms::INSPVAE_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_comms::INSPVAE_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint32 week\n"
"float64 seconds\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"float64 undulation\n"
"float64 std_lat\n"
"float64 std_lon\n"
"float64 std_alt\n"
"float64 ve\n"
"float64 vn\n"
"float64 vu\n"
"float64 std_ve\n"
"float64 std_vn\n"
"float64 std_vu\n"
"float64 pitch\n"
"float64 roll\n"
"float64 yaw\n"
"float64 std_pitch\n"
"float64 std_roll\n"
"float64 std_yaw\n"
"uint32 ns\n"
"uint32 gnss_st\n"
"uint32 nav_st\n"
"uint32 odo_st\n"
"string nav_status\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::serial_comms::INSPVAE_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_comms::INSPVAE_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.week);
      stream.next(m.seconds);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.undulation);
      stream.next(m.std_lat);
      stream.next(m.std_lon);
      stream.next(m.std_alt);
      stream.next(m.ve);
      stream.next(m.vn);
      stream.next(m.vu);
      stream.next(m.std_ve);
      stream.next(m.std_vn);
      stream.next(m.std_vu);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.yaw);
      stream.next(m.std_pitch);
      stream.next(m.std_roll);
      stream.next(m.std_yaw);
      stream.next(m.ns);
      stream.next(m.gnss_st);
      stream.next(m.nav_st);
      stream.next(m.odo_st);
      stream.next(m.nav_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct INSPVAE_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_comms::INSPVAE_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_comms::INSPVAE_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "week: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.week);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "seconds: ";
    Printer<double>::stream(s, indent + "  ", v.seconds);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "undulation: ";
    Printer<double>::stream(s, indent + "  ", v.undulation);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "std_lat: ";
    Printer<double>::stream(s, indent + "  ", v.std_lat);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "std_lon: ";
    Printer<double>::stream(s, indent + "  ", v.std_lon);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "std_alt: ";
    Printer<double>::stream(s, indent + "  ", v.std_alt);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ve: ";
    Printer<double>::stream(s, indent + "  ", v.ve);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vn: ";
    Printer<double>::stream(s, indent + "  ", v.vn);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vu: ";
    Printer<double>::stream(s, indent + "  ", v.vu);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "std_ve: ";
    Printer<double>::stream(s, indent + "  ", v.std_ve);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "std_vn: ";
    Printer<double>::stream(s, indent + "  ", v.std_vn);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "std_vu: ";
    Printer<double>::stream(s, indent + "  ", v.std_vu);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "std_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.std_pitch);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "std_roll: ";
    Printer<double>::stream(s, indent + "  ", v.std_roll);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "std_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.std_yaw);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ns: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ns);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gnss_st: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gnss_st);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "nav_st: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.nav_st);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "odo_st: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.odo_st);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "nav_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.nav_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMS_MESSAGE_INSPVAE_H
