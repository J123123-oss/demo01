# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from serial_comms/INSPVAE.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class INSPVAE(genpy.Message):
  _md5sum = "952992b8f2d9974237c40c1e9c3b19ce"
  _type = "serial_comms/INSPVAE"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
uint32 week
float64 seconds
float64 latitude
float64 longitude
float64 altitude
float64 undulation
float64 std_lat
float64 std_lon
float64 std_alt
float64 ve
float64 vn
float64 vu
float64 std_ve
float64 std_vn
float64 std_vu
float64 pitch
float64 roll
float64 yaw
float64 std_pitch
float64 std_roll
float64 std_yaw
uint32 ns
uint32 gnss_st
uint32 nav_st
uint32 odo_st
string nav_status

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','week','seconds','latitude','longitude','altitude','undulation','std_lat','std_lon','std_alt','ve','vn','vu','std_ve','std_vn','std_vu','pitch','roll','yaw','std_pitch','std_roll','std_yaw','ns','gnss_st','nav_st','odo_st','nav_status']
  _slot_types = ['std_msgs/Header','uint32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','uint32','uint32','uint32','uint32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,week,seconds,latitude,longitude,altitude,undulation,std_lat,std_lon,std_alt,ve,vn,vu,std_ve,std_vn,std_vu,pitch,roll,yaw,std_pitch,std_roll,std_yaw,ns,gnss_st,nav_st,odo_st,nav_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(INSPVAE, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.week is None:
        self.week = 0
      if self.seconds is None:
        self.seconds = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.undulation is None:
        self.undulation = 0.
      if self.std_lat is None:
        self.std_lat = 0.
      if self.std_lon is None:
        self.std_lon = 0.
      if self.std_alt is None:
        self.std_alt = 0.
      if self.ve is None:
        self.ve = 0.
      if self.vn is None:
        self.vn = 0.
      if self.vu is None:
        self.vu = 0.
      if self.std_ve is None:
        self.std_ve = 0.
      if self.std_vn is None:
        self.std_vn = 0.
      if self.std_vu is None:
        self.std_vu = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.std_pitch is None:
        self.std_pitch = 0.
      if self.std_roll is None:
        self.std_roll = 0.
      if self.std_yaw is None:
        self.std_yaw = 0.
      if self.ns is None:
        self.ns = 0
      if self.gnss_st is None:
        self.gnss_st = 0
      if self.nav_st is None:
        self.nav_st = 0
      if self.odo_st is None:
        self.odo_st = 0
      if self.nav_status is None:
        self.nav_status = ''
    else:
      self.header = std_msgs.msg.Header()
      self.week = 0
      self.seconds = 0.
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.undulation = 0.
      self.std_lat = 0.
      self.std_lon = 0.
      self.std_alt = 0.
      self.ve = 0.
      self.vn = 0.
      self.vu = 0.
      self.std_ve = 0.
      self.std_vn = 0.
      self.std_vu = 0.
      self.pitch = 0.
      self.roll = 0.
      self.yaw = 0.
      self.std_pitch = 0.
      self.std_roll = 0.
      self.std_yaw = 0.
      self.ns = 0
      self.gnss_st = 0
      self.nav_st = 0
      self.odo_st = 0
      self.nav_status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I20d4I().pack(_x.week, _x.seconds, _x.latitude, _x.longitude, _x.altitude, _x.undulation, _x.std_lat, _x.std_lon, _x.std_alt, _x.ve, _x.vn, _x.vu, _x.std_ve, _x.std_vn, _x.std_vu, _x.pitch, _x.roll, _x.yaw, _x.std_pitch, _x.std_roll, _x.std_yaw, _x.ns, _x.gnss_st, _x.nav_st, _x.odo_st))
      _x = self.nav_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 180
      (_x.week, _x.seconds, _x.latitude, _x.longitude, _x.altitude, _x.undulation, _x.std_lat, _x.std_lon, _x.std_alt, _x.ve, _x.vn, _x.vu, _x.std_ve, _x.std_vn, _x.std_vu, _x.pitch, _x.roll, _x.yaw, _x.std_pitch, _x.std_roll, _x.std_yaw, _x.ns, _x.gnss_st, _x.nav_st, _x.odo_st,) = _get_struct_I20d4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nav_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nav_status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I20d4I().pack(_x.week, _x.seconds, _x.latitude, _x.longitude, _x.altitude, _x.undulation, _x.std_lat, _x.std_lon, _x.std_alt, _x.ve, _x.vn, _x.vu, _x.std_ve, _x.std_vn, _x.std_vu, _x.pitch, _x.roll, _x.yaw, _x.std_pitch, _x.std_roll, _x.std_yaw, _x.ns, _x.gnss_st, _x.nav_st, _x.odo_st))
      _x = self.nav_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 180
      (_x.week, _x.seconds, _x.latitude, _x.longitude, _x.altitude, _x.undulation, _x.std_lat, _x.std_lon, _x.std_alt, _x.ve, _x.vn, _x.vu, _x.std_ve, _x.std_vn, _x.std_vu, _x.pitch, _x.roll, _x.yaw, _x.std_pitch, _x.std_roll, _x.std_yaw, _x.ns, _x.gnss_st, _x.nav_st, _x.odo_st,) = _get_struct_I20d4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nav_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nav_status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I20d4I = None
def _get_struct_I20d4I():
    global _struct_I20d4I
    if _struct_I20d4I is None:
        _struct_I20d4I = struct.Struct("<I20d4I")
    return _struct_I20d4I
